<?xml version="1.1"?>
<launch>

  <!-- Standalone example launch file for GX3, GX4, GX/CX5, RQ1 and GQ7 series devices-->
  <!-- Note: Feature support is device-dependent and some of the following settings may have no affect on your device. --> 
     <!--  Please consult your device's documentation for supported features -->

<!-- Declare arguments with default values -->
<arg name="name"         default = "ahrs" />
<arg name="port"         default = "/dev/microstrain_ahrs" />
<arg name="baudrate"     default = "115200" />
<arg name="imu_rate"     default = "100" />
<arg name="filter_rate"  default = "50" />
<arg name="imu_frame_id" default = "ahrs" />
<arg name="debug"        default = "false" />
<arg name="diagnostics"  default = "true" />


<group ns="rov/sensors" >
  <!-- ****************************************************************** -->
  <!-- Microstrain sensor node -->
  <!-- ****************************************************************** -->
    
  <node name="ros_mscl_node" pkg="ros_mscl" type="ros_mscl_node" output="screen" ns="$(arg name)">

    <!-- ****************************************************************** -->
    <!-- General Settings -->
    <!-- ****************************************************************** -->
    
    <param name="port"     value="$(arg port)"     type="str" />
    <param name="baudrate" value="$(arg baudrate)" type="int" />
    
    <!-- Controls if the driver-defined setup is sent to the device
          false - The driver will ignore the settings below and use the device's current settings
          true  - Overwrite the current device settings with those listed below
     -->
    <param name="device_setup" value="true" type="bool" />
    
    <!-- Controls if the driver-defined settings are saved 
          false - Do not save the settings
          true  - Save the settings in the device's non-volatile memory
     -->
    <param name="save_settings" value="false" type="bool" />
    
    <!-- Controls if the driver creates a raw binary file
          false - Do not create the file
          true  - Create the file

          Notes: 1) The filename will have the following format - 
                    model_number "_" serial_number "_" datetime (year_month_day_hour_minute_sec) ".bin"
                    example: "3DM-GX5-45_6251.00001_20_12_01_01_01_01.bin"
                 2) This file is useful for getting support from the manufacturer
     -->
    <param name="raw_file_enable" value="false" type="bool" />
    <!-- The directory to store the raw data file (no trailing '/')-->
    <param name="raw_file_directory" value="/home/your_name" type="str" />


    <!-- ****************************************************************** -->
    <!-- IMU Settings -->
    <!-- ****************************************************************** -->
    
    <param name="publish_imu" value="true" type="bool" />

    <param name="imu_data_rate" value="$(arg imu_rate)"      type="int" />
    <param name="imu_frame_id"  value="$(arg imu_frame_id)"  type="str" />

    <!-- Static IMU message covariance values (the device does not generate these) -->
    <!-- Since internally these are std::vector we need to use the rosparam tags -->
    <rosparam param="imu_orientation_cov"> [0.01, 0, 0, 0, 0.01, 0, 0, 0, 0.01]</rosparam>
    <rosparam param="imu_linear_cov">      [0.01, 0, 0, 0, 0.01, 0, 0, 0, 0.01]</rosparam>
    <rosparam param="imu_angular_cov">     [0.01, 0, 0, 0, 0.01, 0, 0, 0, 0.01]</rosparam>
 
    <!-- ****************************************************************** -->
    <!-- Kalman Filter Settings (only applicable for devices with a Kalman Filter) -->
    <!-- ****************************************************************** -->
    <param name="publish_filter" value="true" type="bool" />

    <param name="filter_data_rate"           value="$(arg filter_rate)" type="int" />
    <param name="filter_odom_frame_id"       value="ahrs_odom" type="str" />
    <param name="filter_odom_child_frame_id" value="ahrs" type="str" />
 
    <!-- Sensor2vehicle frame transformation selector 
         0 = None, 1 = Euler Angles, 2 - matrix, 3 - quaternion 
         Notes: These are different ways of setting the same parameter in the device.
                The different options are provided as a convenience.
                Support for matrix and quaternion options is firmware version dependent.
                Quaternion order is [i, j, k, w]
     -->
    <param name="filter_sensor2vehicle_frame_selector" value="0" type="int" />

    <rosparam param="filter_sensor2vehicle_frame_transformation_euler">      [0.0, 0.0, 0.0]</rosparam>
    <rosparam param="filter_sensor2vehicle_frame_transformation_matrix">     [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]</rosparam>
    <rosparam param="filter_sensor2vehicle_frame_transformation_quaternion"> [0.0, 0.0, 0.0, 1.0]</rosparam>
 
     <!-- Controls if the Kalman filter is reset after the settings are configured-->
    <param name="filter_reset_after_config" value="true" type="bool" />

     <!-- Controls if the Kalman filter will auto-init or requires manual initialization-->
    <param name="filter_auto_init" value="true" type="bool" />

    <!-- (All, except -10, and -15 products) Declination Source 1 = None, 2 = magnetic model, 3 = manual -->
    <param name="filter_declination_source" value="2" type="int" />
    <param name="filter_declination"        value="0.23" type="double" />

    <!-- (All, except GQ7, -10, and -15 products) Heading Source 0 = None, 1 = magnetic, 2 = GNSS velocity (note: see manual for limitations)  -->
    <param name="filter_heading_source" value="1" type="int" />
  
    <!-- ZUPT control -->
    <param name="filter_velocity_zupt_topic" value="/rov/sensors/ahrs/moving_vel" type="str" />
    <param name="filter_angular_zupt_topic"  value="/rov/sensors/ahrs/moving_ang" type="str" />
    <param name="filter_velocity_zupt"       value="true" type="bool" />
    <param name="filter_angular_zupt"        value="true" type="bool" />


    <!--  External GPS Time Update Control 
          Notes:    filter_external_gps_time_topic should publish at no more than 1 Hz.
                    gps_leap_seconds should be updated to reflect the current number
                    of leap seconds.
    -->

    <param name="filter_enable_external_gps_time_update"    value="true" type="bool" />
    <param name="filter_external_gps_time_topic"            value="/timer" type="str" />
    <param name="gps_leap_seconds"                          value="18" type="int" />
    
    <param name="publish_gps_corr"  value="true" type="bool" />
    
     <!-- Controls if the driver uses the device generated timestamp (if available) for timestamping messages
          false - Use PC received time for timestamping
          true  - Use device generated timestamp
     -->
    <param name="use_device_timestamp" value="true" type="bool" />

 </node>

    <!-- If enabled, this message can be used to validate time IMU time syncronzation with gps -->
    <!-- It is most useful when using an external timesource and external PPS-->
    <!-- (see: filter_enable_external_gps_time_update) -->

  <!-- ****************************************************************** -->
  <!-- Diagnostics -->
  <!-- ****************************************************************** -->
    
  <group if="$(arg diagnostics)">

    <!-- Diagnostic Aggregator for robot monitor usage -->
    <node pkg="diagnostic_aggregator" type="aggregator_node" name="imu_diagnostic_aggregator">
      <rosparam command="load" file="$(find ros_mscl)/config/diagnostic_analyzers.yaml" />
    </node>
  </group>


  <!-- ****************************************************************** -->
  <!-- Set the debug level to debug -->
  <!-- ****************************************************************** -->
 
  <group if="$(arg debug)">
    <env name="ROSCONSOLE_CONFIG_FILE"
       value="$(find ros_mscl)/config/custom_rosconsole.conf"/>
  </group>

</group>

</launch>
